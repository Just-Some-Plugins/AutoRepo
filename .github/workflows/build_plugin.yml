#file: noinspection UndefinedParamsPresent

name: Build Plugin
on:
  workflow_call:
    inputs:
      build_type:
        description: 'main, or test'
        required: true
        type: string
      target_repo:
          description: 'The repository to upload the plugin to'
          required: true
          type: string
      target_name:
        description: 'The desired name to build to'
        required: true
        type: string
      repo:
        description: 'The repository to trigger the build for'
        required: true
        type: string
      branch:
        description: 'The branch to build'
        required: true
        type: string
      build_config:
        description: 'The build configuration to use'
        required: true
        type: string
    secrets:
      BOT_READ_REPOS_TOKEN:
        description: 'A classic PAT with the full `repo` scope'
        required: true

jobs:
  build_plugin:
    runs-on: ubuntu-latest
    env:
      DALAMUD_HOME: $HOME/.xlcore/dalamud/Hooks/dev

    steps:
      # Debug Inputs
      - name: Debug Inputs
        run: |
          echo "target_name=${{ inputs.target_name }}"
          echo "repo=${{ inputs.repo }}"
          echo "branch=${{ inputs.branch }}"
          echo "build_config=${{ inputs.build_config }}"

      # Checkout the specific branch of the triggering repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.BOT_READ_REPOS_TOKEN }}
          submodules: recursive
          path: repo

      # Download Dalamud development tools
      - name: Download Dalamud
        id: download_dalamud
        run: |
          curl -L https://goatcorp.github.io/dalamud-distrib/latest.zip -o dalamud.zip
          mkdir -p ${{ env.DALAMUD_HOME }}
          unzip -o dalamud.zip -d ${{ env.DALAMUD_HOME }}
          echo "DALAMUD_HOME=${{ env.DALAMUD_HOME }}" >> $GITHUB_ENV

      # Setup folder to place builds into
      - name: Create Output Folder
        id: make_output_folder
        run: |
          dev_folder="${{ runner.temp }}/builds"
          mkdir -p "$dev_folder"
          echo "DalamudDevPlugins=$dev_folder" >> $GITHUB_ENV

      # todo: accept .net versions, and set up that

      # Set up .NET
      - name: Set up .NET9
        id: setup_net9
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '9.0.x'

      # Set up .NET
      - name: Set up .NET8
        id: setup_net8
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '8.0.x'

      # todo: find csproj file and extract the version from it

      # Build the plugin
      - name: Build
        id: actual_build
        run: |
          cd repo
          build_config="${{ inputs.build_config }}"
          dotnet restore
          dotnet build --configuration $build_config | tee build_output.txt

      # Error if build outright failed, or DLL could not be found
      - name: Verify Build Success
        id: verify_build_success
        run: |
          cd repo
          if grep -q 'Build FAILED.' build_output.txt; then
            echo "Build failed."
            exit 1
          fi
          if ! grep -q '.*\.dll' build_output.txt; then
            echo "No DLL found in build output."
            exit 1
          fi
          
          echo "Plugin build success verification passed."

      # todo: accept a "path to output" variable, to better handle this

      # Extract the final .dll
      - name: Extract Internal Info
        id: extract_internal_info
        run: |
          cd repo
          dll_path_line=$(grep -E '.*\.dll' build_output.txt | tail -n 1 | xargs)
          echo "DLL Path Line: $dll_path_line"
          internal_name=$(echo "$dll_path_line" | awk -F' -> ' '{print $1}' | xargs)
          echo "Internal Name='$internal_name'"
          echo "INTERNAL_NAME=$internal_name" >> $GITHUB_ENV
          dll_full_path=$(echo "$dll_path_line" | awk -F' -> ' '{print $2}' | xargs)
          dll_path=$(dirname "${dll_full_path}" | xargs)
          echo "DLL Path='$dll_path'"
          echo "DLL_PATH=$dll_path" >> $GITHUB_ENV

      # List contents of the directory
      - name: List DLL Path Contents
        id: list_dll_contents
        run: |
          dll_path="${{ env.DLL_PATH }}"
          echo "Listing contents of $dll_path"
          ls -la "$dll_path"

      # Compress the plugin
      - name: Compress Plugin
        run: |
          dll_path="${{ env.DLL_PATH }}"
          internal_name="${{ env.INTERNAL_NAME }}"
          build_type="${{ inputs.build_type }}"
          output_zip="${{ env.DalamudDevPlugins }}/${internal_name}_${build_type}.zip"
          echo "output_zip=${{ env.DalamudDevPlugins }}/${internal_name}_${build_type}.zip" >> $GITHUB_ENV
          zip -r "$output_zip" "$dll_path"/*

      # Verify the plugin package
      - name: Verify Plugin Package
        id: verify_plugin_package
        run: |
          output_zip="${{ env.output_zip }}"
          
          # Check if the file exists
          if [ ! -f "$output_zip" ]; then
            echo "Output zip file does not exist."
            exit 1
          fi
          
          # Check if the file is a zip
          if ! file "$output_zip" | grep -q 'Zip archive data'; then
            echo "Output file is not a zip archive."
            exit 1
          fi
          
          # Check if the zip contains at least one .json file
          if ! unzip -l "$output_zip" | grep -q '\.json'; then
            echo "No .json file found in the zip archive."
            exit 1
          fi
          
          # Check if the zip contains at least one .dll file
          if ! unzip -l "$output_zip" | grep -q '\.dll'; then
            echo "No .dll file found in the zip archive."
            exit 1
          fi
          
          echo "Plugin package verification passed."

      # Build the paths to upload the plugin to
      - name: Build Upload Paths
        id: build_upload_paths
        run: |
          internal_name="${{ env.INTERNAL_NAME }}"
          target_repo="${{ inputs.target_repo }}"
          repo="${{ inputs.repo }}"
          branch="${{ inputs.branch }}"
          build_type="${{ inputs.build_type }}"
          output_zip="${{ env.output_zip }}"
          
          IFS=',' read -r -a target_repos <<< "$target_repo"
          
          for target in "${target_repos[@]}"; do
            if [ "$target" = "individual" ]; then
              target="ind"
              file_name=$(echo -n "$repo$branch$build_type" | sha256sum | cut -c1-6)
            else
              target="$target/$branch"
              file_name=$(echo -n "${repo,,}" | awk -F'/' '{print $2}')$build_type
            fi
            echo " > $target/$file_name.zip"
          
            mkdir -p "${{ env.DalamudDevPlugins }}/$target"
            cp "$output_zip" "${{ env.DalamudDevPlugins }}/$target/$file_name.zip"
            echo " >> ${{ env.DalamudDevPlugins }}/$target/$file_name.zip"
          done
          
          rm "$output_zip"

      # Recursively list the contents of `${{ env.DalamudDevPlugins }}`
      - name: Show Upload Content
        id: show_content
        run: |
          echo "Listing contents of the directory to be uploaded:"
          find "${{ env.DalamudDevPlugins }}" -type f

      # Setup node for github-upload-action
      - name: Setup node
        id: setup_node
        uses: actions/setup-node@v1

      # Upload the plugin contents
      - name: Upload to GitHub
        uses: LasyIsLazy/github-upload-action@v0.2.0
        with:
          access-token: ${{ secrets.BOT_WRITE_REPOS_TOKEN }}
          file-path: ${{ env.DalamudDevPlugins }}
          owner: Just-Some-Plugins
          repo: AutoRepo-Web
          branch-name: main
          commit-message: "Upload Plugin: ${{ inputs.repo }}:${{ inputs.branch }}"
