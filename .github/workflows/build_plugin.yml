#file: noinspection UndefinedParamsPresent

name: Build Plugin
on:
  workflow_call:
    inputs:
      build_type:
        description: 'main, or test'
        required: true
        type: string
      target_name:
        description: 'The desired name to build to'
        required: true
        type: string
      repo:
        description: 'The repository to trigger the build for'
        required: true
        type: string
      branch:
        description: 'The branch to build'
        required: true
        type: string
      build_config:
        description: 'The build configuration to use'
        required: true
        type: string
    secrets:
      BOT_READ_REPOS_TOKEN:
        description: 'A classic PAT with the full `repo` scope'
        required: true

jobs:
  build_plugin:
    runs-on: ubuntu-latest
    env:
      DALAMUD_HOME: $HOME/.xlcore/dalamud/Hooks/dev

    steps:
      # Debug Inputs
      - name: Debug Inputs
        run: |
          echo "target_name=${{ inputs.target_name }}"
          echo "repo=${{ inputs.repo }}"
          echo "branch=${{ inputs.branch }}"
          echo "build_config=${{ inputs.build_config }}"

      # Checkout the specific branch of the triggering repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.BOT_READ_REPOS_TOKEN }}
          submodules: recursive
          path: repo

      # Download Dalamud development tools
      - name: Download Dalamud
        id: download_dalamud
        run: |
          curl -L https://goatcorp.github.io/dalamud-distrib/latest.zip -o dalamud.zip
          mkdir -p ${{ env.DALAMUD_HOME }}
          unzip -o dalamud.zip -d ${{ env.DALAMUD_HOME }}
          echo "DALAMUD_HOME=${{ env.DALAMUD_HOME }}" >> $GITHUB_ENV

      # Setup folder to place builds into
      - name: Create Output Folder
        id: make_output_folder
        run: |
          dev_folder="${{ runner.temp }}"
          mkdir -p "$dev_folder"
          echo "DalamudDevPlugins=$dev_folder" >> $GITHUB_ENV

      # todo: accept .net versions, and set up that

      # Set up .NET
      - name: Set up .NET9
        id: setup_net9
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '9.0.x'

      # Set up .NET
      - name: Set up .NET8
        id: setup_net8
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '8.0.x'

      # todo: find csproj file and extract the version from it

      # Build the plugin
      - name: Build
        id: actual_build
        run: |
          cd repo
          build_config="${{ inputs.build_config }}"
          dotnet restore
          dotnet build --configuration $build_config | tee build_output.txt

      # Error if build outright failed, or DLL could not be found
      - name: Check for Build Failure
        run: |
          cd repo
          if grep -q 'Build FAILED.' build_output.txt; then
            echo "Build failed."
            exit 1
          fi
          if ! grep -q '.*\.dll' build_output.txt; then
            echo "No DLL found in build output."
            exit 1
          fi
          
          echo "Plugin build success verification passed."

      # todo: accept a "path to output" variable, to better handle this

      # Extract the final .dll
      - name: Extract Internal Info
        id: extract_internal_info
        run: |
          cd repo
          dll_path_line=$(grep -E '.*\.dll' build_output.txt | tail -n 1)
          echo "DLL Path Line: $dll_path_line"
          internal_name=$(echo "$dll_path_line" | awk -F' -> ' '{print $1}')
          echo "Internal Name='$internal_name'"
          echo "INTERNAL_NAME=$internal_name" >> $GITHUB_OUTPUT
          dll_full_path=$(echo "$dll_path_line" | awk -F' -> ' '{print $2}')
          dll_path=$(dirname "${dll_full_path}")
          echo "DLL Path='$dll_path'"
          echo "DLL_PATH=$dll_path" >> $GITHUB_OUTPUT

      # todo: add zipping and moving to $HOME/builds
