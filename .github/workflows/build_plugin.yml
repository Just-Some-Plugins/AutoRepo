#file: noinspection UndefinedParamsPresent

name: Build Plugin
on:
  workflow_call:
    inputs:
      build_type:
        description: 'main, or test'
        required: true
        type: string
      target_repo:
        description: 'The repository to upload the plugin to'
        required: true
        type: string
      target_name:
        description: 'The desired name to build to'
        required: true
        type: string
      repo:
        description: 'The repository to trigger the build for'
        required: true
        type: string
      branch:
        description: 'The branch to build'
        required: true
        type: string
      build_config:
        description: 'The build configuration to use'
        required: true
        type: string
    secrets:
      BOT_READ_REPOS_TOKEN:
        description: 'A classic PAT with the full `repo` scope'
        required: true
      BOT_WRITE_REPOS_TOKEN:
        description: 'Fine-Grained PAT with Repository: Content: Read and Write, on AutoRepo-Web'
        required: true
concurrency:
  group: build_${{ inputs.build_type }}_${{ inputs.repo }}:${{ inputs.branch }}
  cancel-in-progress: true

jobs:
  build_plugin:
    runs-on: ubuntu-latest
    env:
      DALAMUD_HOME: $HOME/.xlcore/dalamud/Hooks/dev
    outputs:
      output_zip: ${{ steps.compress_plugin.outputs.output_zip }}
      internal_name: ${{ steps.extract_internal_info.outputs.INTERNAL_NAME }}

    steps:
      # Debug Inputs
      - name: Debug Inputs
        run: |
          echo "target_name=${{ inputs.target_name }}"
          echo "repo=${{ inputs.repo }}"
          echo "branch=${{ inputs.branch }}"
          echo "build_config=${{ inputs.build_config }}"

      # Checkout the specific branch of the triggering repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.BOT_READ_REPOS_TOKEN }}
          submodules: recursive
          path: repo

      # Download Dalamud development tools
      - name: Download Dalamud
        id: download_dalamud
        run: |
          curl -L https://goatcorp.github.io/dalamud-distrib/latest.zip -o dalamud.zip
          mkdir -p ${{ env.DALAMUD_HOME }}
          unzip -o dalamud.zip -d ${{ env.DALAMUD_HOME }}
          echo "DALAMUD_HOME=${{ env.DALAMUD_HOME }}" >> $GITHUB_ENV

      # Setup folder to place builds into
      - name: Create Output Folder
        id: make_output_folder
        run: |
          dev_folder="${{ runner.temp }}/builds"
          mkdir -p "$dev_folder"
          echo "DalamudDevPlugins=$dev_folder" >> $GITHUB_ENV

      # todo: accept .net versions, and set up that

      # Set up .NET
      - name: Set up .NET9
        id: setup_net9
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '9.0.x'

      # Set up .NET
      - name: Set up .NET8
        id: setup_net8
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '8.0.x'

      # todo: find csproj file and extract the version from it

      # Build the plugin
      - name: Build
        id: actual_build
        run: |
          cd repo
          build_config="${{ inputs.build_config }}"
          dotnet restore
          dotnet build --configuration $build_config | tee build_output.txt

      # Error if build outright failed, or DLL could not be found
      - name: Verify Build Success
        id: verify_build_success
        run: |
          cd repo
          if grep -q 'Build FAILED.' build_output.txt; then
            echo "Build failed."
            exit 1
          fi
          if ! grep -q '.*\.dll' build_output.txt; then
            echo "No DLL found in build output."
            exit 1
          fi
          
          echo "Plugin build success verification passed."

      # todo: accept a "path to output" variable, to better handle this

      # Extract the final .dll
      - name: Extract Internal Info
        id: extract_internal_info
        run: |
          cd repo
          dll_path_line=$(grep -E '.*\.dll' build_output.txt | tail -n 1 | xargs)
          echo "DLL Path Line: $dll_path_line"
          internal_name=$(echo "$dll_path_line" | awk -F' -> ' '{print $1}' | xargs)
          echo "Internal Name='$internal_name'"
          echo "INTERNAL_NAME=$internal_name" >> $GITHUB_ENV
          echo "INTERNAL_NAME=$internal_name" >> $GITHUB_OUTPUT
          dll_full_path=$(echo "$dll_path_line" | awk -F' -> ' '{print $2}' | xargs)
          dll_path=$(dirname "${dll_full_path}" | xargs)
          echo "DLL Path='$dll_path'"
          echo "DLL_PATH=$dll_path" >> $GITHUB_ENV

      # List contents of the directory
      - name: List DLL Path Contents
        id: list_dll_contents
        run: |
          dll_path="${{ env.DLL_PATH }}"
          echo "Listing contents of $dll_path"
          ls -la "$dll_path"

      # Compress the plugin
      - name: Compress Plugin
        id: compress_plugin
        run: |
          dll_path="${{ env.DLL_PATH }}"
          internal_name="${{ env.INTERNAL_NAME }}"
          build_type="${{ inputs.build_type }}"
          output_zip="${{ env.DalamudDevPlugins }}/${internal_name}_${build_type}.zip"
          echo "output_zip=${{ env.DalamudDevPlugins }}/${internal_name}_${build_type}.zip" >> $GITHUB_ENV
          echo "output_zip=${{ env.DalamudDevPlugins }}/${internal_name}_${build_type}.zip" >> $GITHUB_OUTPUT
          
          self_packaged="${dll_path}/${internal_name}"
          if [ -d "$self_packaged" ] && [ "$(find "$self_packaged" -name '*.zip')" ]; then
            echo "Found a .zip file in $self_packaged, using that."
            cp "$self_packaged"/*.zip "$output_zip"
          else
            echo "No .zip file found in $self_packaged, packaging dll."
            cd $dll_path
            zip -r "$output_zip" ./*
          fi

      # Verify the plugin package
      - name: Verify Plugin Package
        id: verify_plugin_package
        run: |
          output_zip="${{ env.output_zip }}"
          
          # Check if the file exists
          if [ ! -f "$output_zip" ]; then
            echo "Output zip file does not exist."
            exit 1
          fi
          
          # Check if the file is a zip
          if ! file "$output_zip" | grep -q 'Zip archive data'; then
            echo "Output file is not a zip archive."
            exit 1
          fi
          
          # Check if the zip contains at least one .json file
          if ! unzip -l "$output_zip" | grep -q '\.json'; then
            echo "No .json file found in the zip archive."
            exit 1
          fi
          
          # Check if the zip contains at least one .dll file
          if ! unzip -l "$output_zip" | grep -q '\.dll'; then
            echo "No .dll file found in the zip archive."
            exit 1
          fi
          
          echo "Plugin package verification passed."

      # Upload the zip as an artifact
      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build_type }}
          path: ${{ env.output_zip }}
          if-no-files-found: error
          retention-days: 1

  build_repo:
    needs: build_plugin
    runs-on: ubuntu-latest
    env:
      output_zip: ${{ needs.build_plugin.outputs.output_zip }}
      internal_name: ${{ needs.build_plugin.outputs.internal_name }}
    outputs:
      repo_url: ${{ steps.build_repo_file.outputs.repo_url }}

    steps:
      # Setup folder to place builds into
      - name: Create Output Folder
        id: make_output_folder
        run: |
          dev_folder="${{ runner.temp }}/builds"
          mkdir -p "$dev_folder"
          echo "DalamudDevPlugins=$dev_folder" >> $GITHUB_ENV

      # Download the uploaded artifact
      - name: Download Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.build_type }}
          path: ${{ env.DalamudDevPlugins }}

      # Checkout the AutoRepo-Web repository
      - name: Checkout AutoRepo-Web Repository
        uses: actions/checkout@v4
        with:
          repository: Just-Some-Plugins/AutoRepo-Web
          path: web
          token: ${{ secrets.BOT_WRITE_REPOS_TOKEN }}

      # Move AutoRepo-Web to the correct location
      - name: Move AutoRepo-Web
        run: |
          mv web/* ${{ env.DalamudDevPlugins }}

      # List the contents of the dev folder
      - name: List Dev Folder Contents
        id: list_dev_folder_contents
        run: |
          echo "Listing contents of ${{ env.DalamudDevPlugins }}"
          ls -la ${{ env.DalamudDevPlugins }}

      # Build the paths to upload the plugin to
      - name: Build Upload Paths
        id: build_upload_paths
        run: |
          internal_name="${{ env.internal_name }}"
          target_repo="${{ inputs.target_repo }}"
          repo="${{ inputs.repo }}"
          branch="${{ inputs.branch }}"
          build_type="${{ inputs.build_type }}"
          output_zip="${{ env.output_zip }}"
          
          IFS=',' read -r -a target_repos <<< "$target_repo"
          
          # Setup repo data
          for target in "${target_repos[@]}"; do
            if [ "$target" = "individual" ]; then
              target="ind"
              file_name=$(echo -n "$repo$branch" | sha256sum | cut -c1-6)_$build_type
            else
              target="$target/$branch"
              file_name=$(echo -n "${repo,,}" | awk -F'/' '{print $2}')_$build_type
            fi
            echo " > $target/$file_name.zip"
          
            mkdir -p "${{ env.DalamudDevPlugins }}/$target"
            cp "$output_zip" "${{ env.DalamudDevPlugins }}/$target/$file_name.zip"
            echo " >> ${{ env.DalamudDevPlugins }}/$target/$file_name.zip"
          done
          
          rm "$output_zip"

      # Build the repo files
      - name: Build Repo File
        id: build_repo_file
        run: |
          target_name="${{ inputs.target_name }}"
          internal_name="${{ env.internal_name }}"
          target_repo="${{ inputs.target_repo }}"
          repo="${{ inputs.repo }}"
          branch="${{ inputs.branch }}"
          build_type="${{ inputs.build_type }}"
          output_zip="${{ env.output_zip }}"
          url_base="https://repo.justsome.site/"
          repo_url=""
          
          IFS=',' read -r -a target_repos <<< "$target_repo"
          #10
          # Setup repo data
          for target in "${target_repos[@]}"; do
            if [ "$target" = "individual" ]; then
              target="ind"
              repo_name=$(echo -n "$repo$branch" | sha256sum | cut -c1-6)
              file_name=$(echo -n "$repo$branch" | sha256sum | cut -c1-6)_$build_type
            else
              target="$target/$branch"
              repo_name="repo"
              file_name=$(echo -n "${repo,,}" | awk -F'/' '{print $2}')_$build_type
            fi
            zip="${{ env.DalamudDevPlugins }}/$target/$file_name.zip"
            repo_name_file="${repo_name,,}.json"
            repo_file="${{ env.DalamudDevPlugins }}/$target/$repo_name_file"
            repo_url="${url_base}${target}/${repo_name_file}"
            echo " > $repo_file"
            #26
            # Load manifest data
            unzip -j "$zip" "${internal_name}.json" -d "${{ env.DalamudDevPlugins }}"
            json_file="${{ env.DalamudDevPlugins }}/${internal_name}.json"
            json=$(cat "$json_file")
            for key in $(echo "$json" | jq -r 'keys[]'); do
              safe_key=$(echo "$key" | tr '[:upper:]' '[:lower:]')
              value=$(echo "$json" | jq -r --arg key "$key" '.[$key]')
              eval "manifest_${safe_key}='${value//\'/\'\\\'\'}'"
              echo "manifest_${safe_key}='${value}'"
            done
            #36
            # Write repo file
            if [ ! -f "$repo_file" ]; then
              echo "Repo file does not exist, creating $repo_file"
              echo '[' > "$repo_file"
              echo '  {' >> "$repo_file"
              echo '    "Name": "'$target_name'",' >> "$repo_file"
              echo '    "InternalName": "'$internal_name'",' >> "$repo_file"
              echo '    "Author": "'$manifest_author'",' >> "$repo_file"
              echo '    "Punchline": "'$manifest_punchline'",' >> "$repo_file"
              echo '    "Description": "'$manifest_description'",' >> "$repo_file"
              echo '    "RepoUrl": "'$manifest_repourl'",' >> "$repo_file"
              echo '    "ApplicableVersion": "'$manifest_applicableversion'",' >> "$repo_file"
              echo '    "AssemblyVersion": "'$manifest_assemblyversion'",' >> "$repo_file"
              echo '    "DalamudApiLevel": "'$manifest_dalamudapilevel'",' >> "$repo_file"
              echo '    "IconUrl": "'$manifest_iconurl'",' >> "$repo_file"
              
              main_url="${url_base}${target}/${file_name}.zip"
              echo '    "DownloadLinkInstall": "'$main_url'",' >> "$repo_file"
              echo '    "DownloadLinkUpdate": "'$main_url'",' >> "$repo_file"
          
              if [ "${{ inputs.build_type }}" != "test" ]; then
                echo '    "DownloadLinkTesting": "'$main_url'",' >> "$repo_file"
              else
                testing_url="${url_base}${target}/${repo_name}_test.zip"
                echo '    "DownloadLinkTesting": "'$testing_url'",' >> "$repo_file"
                echo '    "TestingAssemblyVersion": "'$manifest_testingassemblyversion'",' >>  "$repo_file"
                echo '    "TestingDalamudApiLevel": "'$manifest_testingdalamudapilevel'",' >> "$repo_file"
              fi
              echo '    "LastUpdate": '$(date +%s)',' >> "$repo_file"
          
              echo '    "AcceptsFeedback": false,' >> "$repo_file"
              echo '    "LoadPriority": 0,' >> "$repo_file"
              echo '    "IsHide": false,' >> "$repo_file"
              echo '    "TestingExclusive": "False"' >> "$repo_file"
              echo '  }' >> "$repo_file"
              echo ']' >> "$repo_file"
            else
              echo "Repo file exists at $repo_file, updating"
          
              # Increment the AssemblyVersion
              assembly_version=$(jq -r '.[0].AssemblyVersion' "$repo_file")
              new_assembly_version=$(echo "$assembly_version" | awk -F. -v OFS=. '{$NF += 1 ; print}')
              jq '.[0].AssemblyVersion = "'$new_assembly_version'"' "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
          
              # Increment the LastUpdate
              jq '.[0].LastUpdate = '$(date +%s) "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
          
              if [ "${{ inputs.build_type }}" == "test" ]; then
                # Increment the TestingAssemblyVersion if present, otherwise add it
                if jq -e '.[0].TestingAssemblyVersion' "$repo_file" > /dev/null; then
                    testing_assembly_version=$(jq -r '.[0].TestingAssemblyVersion' "$repo_file")
                    new_testing_assembly_version=$(echo "$testing_assembly_version" | awk -F. -v OFS=. '{$NF += 1 ; print}')
                    jq '.[0].TestingAssemblyVersion = "'$new_testing_assembly_version'"' "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
                else
                    jq '.[0].TestingAssemblyVersion = "'$manifest_testingassemblyversion'"' "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
                fi
          
                # Set the TestingDalamudApiLevel if present, otherwise add it, to $manifest_testingdalamudapilevel
                if jq -e '.[0].TestingDalamudApiLevel' "$repo_file" > /dev/null; then
                    jq '.[0].TestingDalamudApiLevel = "'$manifest_testingdalamudapilevel'"' "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
                else
                    jq '.[0].TestingDalamudApiLevel = "'$manifest_testingdalamudapilevel'"' "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
                fi
          
                # Set the DownloadLinkTesting to the new zip
                testing_url="${url_base}${target}/${repo_name}_test.zip"
                jq '.[0].DownloadLinkTesting = "'$testing_url'"' "$repo_file" > tmp.$$.json && mv tmp.$$.json "$repo_file"
              fi
            fi
          
            rm "${{ env.DalamudDevPlugins }}/${internal_name}.json"
          done
          
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT

      # todo: support fully updating an existing repo file with manifest data

      # Check the repo files
      - name: Check Repo Files
        id: check_repo_files
        run: |
          target_repo="${{ inputs.target_repo }}"
          repo="${{ inputs.repo }}"
          branch="${{ inputs.branch }}"
          build_type="${{ inputs.build_type }}"
          
          IFS=',' read -r -a target_repos <<< "$target_repo"
          
          for target in "${target_repos[@]}"; do
            if [ "$target" = "individual" ]; then
              target="ind"
              repo_name=$(echo -n "$repo$branch" | sha256sum | cut -c1-6)
              file_name=$(echo -n "$repo$branch" | sha256sum | cut -c1-6)_$build_type
            else
              target="$target/$branch"
              repo_name="repo"
              file_name=$(echo -n "${repo,,}" | awk -F'/' '{print $2}')_$build_type
            fi
            repo_name="${repo_name,,}.json"
            repo_file="${{ env.DalamudDevPlugins }}/$target/$repo_name"
          
            echo "Contents of the JSON file:"
            cat "$repo_file"
          done

      # Re-Upload the zips and  as an artifact
      - name: Re-Upload Plugin Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.build_type }}
          path: ${{ env.DalamudDevPlugins }}
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  # Publish the plugin
  run_publish_plugin:
    name: ${{ inputs.build_type }}
    needs: build_repo

    # noinspection UndefinedAction
    uses: ./.github/workflows/publish_plugin.yml
    with:
      build_type: ${{ inputs.build_type }}
      repo: ${{ inputs.repo }}
      branch: ${{ inputs.branch }}
      repo_url: ${{ needs.build_repo.outputs.repo_url }}
    secrets: inherit
