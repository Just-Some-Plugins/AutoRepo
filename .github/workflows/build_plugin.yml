name: Build Plugin
on:
  workflow_call:
    inputs:
      target_name:
        description: 'The desired name to build to'
        required: true
        type: string
      assembly_name:
        description: 'The safe name to build to'
        required: true
        type: string
      repo:
        description: 'The repository to trigger the build for'
        required: true
        type: string
      branch:
        description: 'The branch to build'
        required: true
        type: string
      build_config:
        description: 'The build configuration to use'
        required: true
        type: string
    secrets:
      BOT_READ_REPOS_TOKEN:
        description: 'A classic PAT with the full `repo` scope'
        required: true

jobs:
  build_plugin:
    runs-on: windows-latest

    steps:
      # Debug Inputs
      - name: Debug Inputs
        run: |
          echo "target_name=${{ inputs.target_name }}"
          echo "assembly_name=${{ inputs.assembly_name }}"
          echo "repo=${{ inputs.repo }}"
          echo "branch=${{ inputs.branch }}"
          echo "build_config=${{ inputs.build_config }}"
        shell: bash

      # Checkout the specific branch of the triggering repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.BOT_READ_REPOS_TOKEN }}
          submodules: recursive
          path: repo

      # Download Dalamud development tools
      - name: Download Dalamud
        id: setup_dalamud
        uses: Blooym/setup-dalamud@v1
        with:
          branch: release # Replace with 'stg'

      # Setup folder to place builds into
      - name: Create Output Folder
        id: make_output_folder
        run: |
          dev_folder="${{ runner.temp }}\${{ inputs.assembly_name }}"
          mkdir -p "$dev_folder"
          echo "DalamudDevPlugins=$dev_folder" >> $GITHUB_ENV
        shell: bash

      # Set up .NET
      - name: Set up .NET
        id: setup_net
        uses: actions/setup-dotnet@v4
        with:
          # noinspection UndefinedParamsPresent
          dotnet-version: '8.0.x'

      # todo: find csproj file and extract the version from it

      # Build the plugin
      - name: Build
        id: dotnet_build
        run: |
          cd .\repo\
          dir
          $build_config = "${{ inputs.build_config }}"
          $assembly_name = "${{ inputs.assembly_name }}"
          dotnet restore
          dotnet build --configuration $build_config --no-restore
        shell: pwsh

      # todo: add zipping and moving to $HOME/builds
