# compatible with AutoRepo-Worker 0.0.6 issue#1 comments
name: Parse and Process Trigger
on:
  issue_comment:
    types:
      - created


jobs:
  parse_trigger:
    name: Parse Trigger
    runs-on: windows-latest
    outputs:
      trigger_code_repo: ${{ steps.set_env_vars.outputs.trigger_code_repo }}
      trigger_target_name: ${{ steps.set_env_vars.outputs.trigger_target_name }}
      trigger_assembly_name: ${{ steps.sanitize_target_name.outputs.trigger_assembly_name }}
      trigger_branch_main: ${{ steps.set_env_vars.outputs.trigger_branch_main }}
      trigger_branch_test: ${{ steps.set_env_vars.outputs.trigger_branch_test }}
      trigger_branch_main_build: ${{ steps.set_env_vars.outputs.trigger_branch_main_build }}
      trigger_branch_test_build: ${{ steps.set_env_vars.outputs.trigger_branch_test_build }}

    # Only bot comments on the trigger issue (#1)
    if: |
      github.event.comment.user.login == 'just-some-bot' &&
      github.event.issue.number == 1

    steps:
      # Set git to use the bot's credentials
      - name: Setup Git
        id: setup_git
        run: |
          git config --global user.name 'just-some-bot'
          git config --global user.email 'justsomeplugins@zbee.codes'

      # Parse the JSON from the comment and save it to `parsed.json`
      - name: Parse JSON from Comment
        id: parse_json
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          # Ensure COMMENT_BODY is properly formatted
          COMMENT_BODY=$(echo -e "$COMMENT_BODY")

          # Initialize an empty array
          lines=()

          # Iterate over each line in COMMENT_BODY and add it to the array
          while IFS= read -r line || [[ -n "$line" ]]; do
            lines+=("$line")
          done <<< "$COMMENT_BODY"
          
          echo "Number of lines in comment body: ${#lines[@]}"
          echo "Lines 13 through 28:"
          for i in {13..28}; do
            echo "${lines[i]}"
          done

          json_block=$(printf "%s\n" "${lines[@]:13:16}")

          echo "Extracted JSON Block:"
          echo "$json_block"

          if [ -z "$json_block" ]; then
            echo "No JSON block found in the comment." >&2
            exit 1
          fi

          output_file_path="parsed.json"
          echo "$json_block" > "$output_file_path"

          if [ ! -f "$output_file_path" ]; then
            echo "Failed to write JSON block to file." >&2
            exit 1
          fi
        shell: bash

      # Convert the trigger's JSON to Outputs
      # e.g. `steps.set_env_vars.outputs.trigger_branch_main`
      # e.g. `needs.parse_trigger.outputs.trigger_branch_test`
      - name: Parse JSON values to Outputs, Sanitize Target_Name
        id: set_env_vars
        run: |
          json=$(cat parsed.json)
          echo $json
          for key in $(echo "$json" | jq -r 'keys[]'); do
            value=$(echo "$json" | jq -r --arg key "$key" '.[$key]')
            echo "trigger_$key=$value" >> "$GITHUB_OUTPUT"
          done
        shell: bash

      # Sanitize the target name
      - name: Sanitize Target Name
        id: sanitize_target_name
        run: |
          target_name="${{ steps.set_env_vars.outputs.trigger_target_name }}"
          sanitized_target_name=$(echo "$target_name" | tr -cd '[:alnum:]')
          echo "trigger_assembly_name=$sanitized_target_name" >> "$GITHUB_OUTPUT"
        shell: bash

      # The bot auto-accepts collaboration invites every night,
      # but we are doing it here to make sure that the bot has
      # access to the repo
      - name: Auto Accept Collaboration invites
        id: accept_invites
        run: |
          # List all repository invitations
          invitations=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.BOT_INVITE_ACCEPT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/user/repository_invitations")

          # Parse the JSON response to extract invitation IDs
          invitation_ids=$(echo "$invitations" | jq -r '.[].id')

          # Accept each invitation by its ID
          for id in $invitation_ids; do
            curl -s -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.BOT_INVITE_ACCEPT_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/user/repository_invitations/$id"
          done
        shell: bash

  # Build the main branch if it was requested in the trigger
  build_main:
    name: Build Main Branch

    needs: parse_trigger
    if: ${{ needs.parse_trigger.outputs.trigger_branch_main != 'null' }}

    uses: ./.github/workflows/build_plugin.yml
    with:
      target_name: ${{ needs.parse_trigger.outputs.trigger_target_name }}
      assembly_name: ${{ needs.parse_trigger.outputs.trigger_assembly_name }}
      repo: ${{ needs.parse_trigger.outputs.trigger_code_repo }}
      branch: ${{ needs.parse_trigger.outputs.trigger_branch_main }}
      build_config: ${{ needs.parse_trigger.outputs.trigger_branch_main_build }}
    secrets: inherit

  # Build the test branch if it was requested in the trigger
  build_test:
    name: Build Test Branch

    needs: parse_trigger
    if: ${{ needs.parse_trigger.outputs.trigger_branch_test != 'null' }}

    uses: ./.github/workflows/build_plugin.yml
    with:
      target_name: ${{ needs.parse_trigger.outputs.trigger_target_name }}
      assembly_name: ${{ needs.parse_trigger.outputs.trigger_assembly_name }}
      repo: ${{ needs.parse_trigger.outputs.trigger_code_repo }}
      branch: ${{ needs.parse_trigger.outputs.trigger_branch_test }}
      build_config: ${{ needs.parse_trigger.outputs.trigger_branch_test_build }}
    secrets: inherit

  # todo: add job to build or update repository json
  # todo: add job to contribute the plugins to AutoRepo-Web
  # todo: add job to update list of repos on discord via bot
